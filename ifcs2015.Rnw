\documentclass[10pt]{beamer}

\usepackage[utf8]{inputenc}
\usepackage{color}
\usepackage{tikz}
\usepackage{mathtools}
\usepackage{array}
\usepackage{amsmath, amssymb, bbm}
\usepackage{verbatim}
\usepackage{relsize}
\usepackage{multirow}
\usepackage{rotating}
\usepackage{ragged2e}
\usepackage{soul}
%\usetheme{Warsaw}
%\usepackage{dsfont}
%\usecolortheme{lily}

\definecolor{obs}{RGB}{53,106,160}
\definecolor{post}{RGB}{0,110,46}
\definecolor{class}{RGB}{160,110,46}
\definecolor{idea}{RGB}{162,162,162}

\definecolor{gg1}{RGB}{248,118,109}
\definecolor{gg2}{RGB}{183,159,0}
\definecolor{gg3}{RGB}{0,186,56}
\definecolor{gg4}{RGB}{0,191,196}
\definecolor{gg5}{RGB}{97,156,255}
\definecolor{gg6}{RGB}{245,100,227}

\newcommand{\obs}[1]{{\color{obs}#1}}
\newcommand{\post}[1]{{\color{post}#1}}
\newcommand{\class}[1]{{\color{class}#1}}
\newcommand{\idea}[1]{{\uncover<2>{\color{idea}#1}}}
\newcommand{\tidea}[2]{{\uncover<#1>{\color{idea}#2}}}
\newcommand{\red}[1]{{\color{red}#1}}
\newcommand{\blue}[1]{{\color{blue}#1}}

\newcommand{\gga}[1]{{\color{gg1}#1}}
\newcommand{\ggb}[1]{{\color{gg2}#1}}
\newcommand{\ggc}[1]{{\color{gg3}#1}}
\newcommand{\ggd}[1]{{\color{gg4}#1}}
\newcommand{\gge}[1]{{\color{gg5}#1}}
\newcommand{\ggf}[1]{{\color{gg6}#1}}

\title{An integrated formulation for merging mixture components based on posterior probabilities}
\subtitle{IFCS 2015, Bologna}
\author{\emph{Marc~Comas-Cufí} \\ \and Josep~Antoni~Martín-Fernández \\\and Glòria~Mateu-Figueras}
\institute{Universitat de Girona}
\date{July 8th, 2015}

\begin{document}


\begin{frame}
\titlepage
\end{frame}

<<echo=FALSE, include=FALSE>>=
knitr::opts_chunk$set(comment=NA, echo=FALSE)
library(ggplot2)
library(mclust)
library(dplyr)
library(mixpack)
library(grid)
library(gridBase)
options(width=200)
knitr::opts_chunk$set(comment = " ", echo = FALSE, warning = FALSE)
rnormmix = function(n, pi= c(1/3, 1/3, 1/3), 
                    mean = c(-2, 0, 2),
                    sd = c(1, 1, 1)){
  df = apply(cbind(mean, sd), 1, function(pars) rnorm(n, mean=pars[1], sd=pars[2]))
  z = sapply(sample(1:3, size = n, replace = TRUE, prob = pi), function(i) 1:3 == i)
  df[t(z)]
}
dnormmix = function(x, pi= c(1/3, 1/3, 1/3), 
                    mean = c(-2, 0, 2),
                    sd = c(1, 1, 1)){
  df = apply(cbind(pi, mean, sd), 1, function(pars) pars[1] * dnorm(x, mean=pars[2], sd=pars[3]))
  apply(df, 1, sum)
}
cnormmix = function(x, pi= c(1/3, 1/3, 1/3), 
                    mean = c(-2, 0, 2),
                    sd = c(1, 1, 1),
                    class = 1:length(pi)){
  df = apply(cbind(pi, mean, sd), 1, function(pars) pars[1] * dnorm(x, mean=pars[2], sd=pars[3]))
  as.factor(class[apply(df, 1, which.max)])
}
get_sample = function(seed = 2){
  set.seed(seed)
  Pi = c(2/9, 4/9, 3/9)
  Mean = c(-2, 3.5, 5)
  Sd = c(0.65,1.2,0.8)
  df = data.frame('x' = rnormmix(n = 100,  pi = Pi, mean = Mean, sd = Sd))
  df$f = dnormmix(df$x, pi = Pi, mean = Mean, sd = Sd)
  df$class = cnormmix(df$x, pi = Pi, mean = Mean, sd = Sd)
  df$class2 = cnormmix(df$x, pi = Pi, mean = Mean, sd = Sd, class=c(1,2,2))
  df$f1 = Pi[1] * dnorm(df$x, mean = Mean[1], sd = Sd[1]) / df$f
  df$f2 = Pi[2] * dnorm(df$x, mean = Mean[2], sd = Sd[2]) / df$f
  df$f3 = Pi[3] * dnorm(df$x, mean = Mean[3], sd = Sd[3]) / df$f
  df.dens = data.frame('x' = seq(-5, 10, 0.2))
  df.dens$f = dnormmix(df.dens$x, pi = Pi, mean = Mean, sd = Sd)
  df.dens$f1 = Pi[1] * dnorm(df.dens$x, mean = Mean[1], sd = Sd[1])
  df.dens$f2 = Pi[2] * dnorm(df.dens$x, mean = Mean[2], sd = Sd[2])
  df.dens$f3 = Pi[3] * dnorm(df.dens$x, mean = Mean[3], sd = Sd[3])
  list('sample' = df, 'density' = df.dens)
}
@

\section{Introducing the problem of merging components}

<<include=FALSE>>=
set.seed(3)
ms = c(runif(3, min = -2 , max= -1), runif(3, min = 0 , max= 1), runif(3, min = 2 , max= 3))
x = Reduce('c', lapply(ms, function(m) rnorm(1000, m, 0.1)))
mc = Mclust(x, G = 2:10)

df.d = data.frame(
  x = x,
  class = mc$classification)

hp = get_hierarchical_partition(mc$z, lambda = function(v_tau, a, b) if(which.max(v_tau) == b) 1 else 0, omega = function(v_tau, a) v_tau[a])
@

<<include=FALSE>>=
draw_partition = function(LVL){
  p = ggplot() + 
    geom_histogram(data=df.d, aes(x=x, y = ..density..), binwidth=0.1, col='black', fill='white', alpha=0.6)
  
  for(i in hp[[LVL]]){
    df.d.dens = data.frame(x = seq(-3, 4, length=1000)) 
    func = function(x) Reduce(`+`, lapply(i, function(i) mc$parameters$pro[i] * dnorm(x, mean = mc$parameters$mean[i], sd = sqrt(mc$parameters$variance$sigmasq) )))
    p = p + geom_line(data=df.d.dens %>% mutate(f = func(x)), aes(x=x, y=f), size = 1, col = rainbow(8)[1+(3+i[[1]])%%8], alpha=0.99)
  }
  
  p + theme_bw() +  theme(legend.position="none") + 
    theme(axis.ticks = element_blank(), 
          axis.text = element_blank(),
          panel.grid=element_blank(),
          panel.border = element_blank()) + ylab(NULL) + ylim(0,1) + xlab(NULL)
}
@

<<include=FALSE>>=
library(dendextend)

set_diff = lapply(8:2, function(i) unlist(setdiff(hp[[i-1]], hp[[i]])))
cummulative = lapply(1:7, function(till, set_diff){
  if(till>1)
    Reduce('union', set_diff[1:(till-1)])
  else
    integer(0)
}, set_diff)
set_diff2 = mapply(intersect, set_diff, cummulative)

leafs = mapply(setdiff, set_diff, set_diff2)




a = list()
a$merge = do.call('rbind', lapply(1:7, function(i){
  if(length(leafs[[i]]) == 2){
    return(-leafs[[i]])
  }
  if(length(leafs[[i]]) == 1){
    i1 = max(which(sapply(set_diff[1:(i-1)], 
                          function(s) 
                            length(setdiff(setdiff(set_diff[[i]], leafs[[i]]), s)) == 0)))
    return(c(-leafs[[i]], i1))
  }
  if(length(leafs[[i]]) == 0){
    i1 = max(which(sapply(set_diff[1:(i-1)], 
                          function(s) 
                            length(setdiff(s, setdiff(set_diff[[i]], leafs[[i]]))) == 0)))
    i2 = max(which(sapply(set_diff[1:(i-1)], 
                          function(s) 
                            length(setdiff(s, setdiff(setdiff(set_diff[[i]], set_diff[[i1]]), leafs[[i]]))) == 0)))
    return(c(i1, i2))
  }
}))
a$height <- 1:nrow(a$merge)
a$order <- hp[[1]][[1]]
a$labels <- rep("", 8)#hp[[1]][[1]]
class(a) <- "hclust"        # make it an hclust object

hc = as.dendrogram(a)

# Function to color branches
colbranches <- function(n, col)
{
  a <- attributes(n) # Find the attributes of current node
  # Color edges with requested color
  attr(n, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
  n # Don't forget to return the node!
}

plt_den = function(LVL, h){
  d1=color_branches(rev(hc), k=LVL, col = rainbow(8)[1+(3+sapply(hp[[LVL]], function(i) i[[1]]))%% 8])
  d1 = assign_values_to_branches_edgePar(d1, value = 7, edgePar = "lwd")
  
  plot(d1, lwd=2, lty = 3, axes = FALSE)
  rect(0, h, 10, 10, col='white', border=NA)
}
@

\begin{frame}[t]
\frametitle{Hierarchical mixture sequence}
\begin{itemize}
\item Repeatedly merge those components "more likely" to be considered as a single cluster

\begin{columns}
\begin{column}{0.90\textwidth}
\only<1>{
<<fig.width=8.5, fig.height=3>>=
lvl = 8
print(draw_partition(8))
@
}
\only<2>{
<<fig.width=8.5, fig.height=3>>=
lvl = 7
print(draw_partition(lvl))
@
}
\only<3>{
<<fig.width=8.5, fig.height=3>>=
lvl = 6
print(draw_partition(lvl))
@
}
\only<4>{
<<fig.width=8.5, fig.height=3>>=
lvl = 5
print(draw_partition(lvl))
@
}
\only<5>{
<<fig.width=8.5, fig.height=3>>=
lvl = 4
print(draw_partition(lvl))
@
}
\only<6>{
<<fig.width=8.5, fig.height=3>>=
lvl = 3
print(draw_partition(lvl))
@
}
\only<7>{
<<fig.width=8.5, fig.height=3>>=
lvl = 2
print(draw_partition(lvl))
@
}
\only<8->{
<<fig.width=8.5, fig.height=3>>=
lvl = 1
print(draw_partition(lvl))
@
}
\end{column}
\begin{column}{0.20\textwidth}
\only<1>{
<<fig.width=6, fig.height=6>>=
lvl = 8
par(mar=c(0,0,0,0))
plt_den(lvl, 8.5-lvl)
@
}
\only<2>{
<<fig.width=6, fig.height=6>>=
lvl = 7
par(mar=c(0,0,0,0))
plt_den(lvl, 8.5-lvl)
@
}
\only<3>{
<<fig.width=6, fig.height=6>>=
lvl = 6
par(mar=c(0,0,0,0))
plt_den(lvl, 8.5-lvl)
@
}
\only<4>{
<<fig.width=6, fig.height=6>>=
lvl = 5
par(mar=c(0,0,0,0))
plt_den(lvl, 8.5-lvl)
@
}
\only<5>{
<<fig.width=6, fig.height=6>>=
lvl = 4
par(mar=c(0,0,0,0))
plt_den(lvl, 8.5-lvl)
@
}
\only<6>{
<<fig.width=6, fig.height=6>>=
lvl = 3
par(mar=c(0,0,0,0))
plt_den(lvl, 8.5-lvl)
@
}
\only<7>{
<<fig.width=6, fig.height=6>>=
lvl = 2
par(mar=c(0,0,0,0))
plt_den(lvl, 8.5-lvl)
@
}
\only<8->{
<<fig.width=6, fig.height=6>>=
lvl = 1
par(mar=c(0,0,0,0))
plt_den(lvl, 8.5-lvl)
@
}
\end{column}
\end{columns}
\item<9> Strategies based on posterior probabilities
\[
\left(\tau_{i1}, \dots, \tau_{ik} \right)
\]
where
\[
\tau_{ij} = \frac{\pi_j f_j(x_i;\theta_j)}{\sum_{\ell=1}^K \pi_\ell f_\ell(x_i;\theta_\ell)}.
\]
\end{itemize}
\end{frame}

\section{Merging components based on posterior probability}

\begin{frame}[t]
\frametitle{Merging components based on posterior probability}

\begin{block}{Input}
A sample of probabilities to belong to each component $I_j$, 
\begin{columns}
\column{0.4\textwidth}
\[ \left[ \begin{array}{ccccc}
\idea{(}\tau_{11}\idea{,} & \dots & \tau_{1j}\idea{,} & \dots & \tau_{1k}\idea{),} \\
\vdots      & &    \vdots                     & &    \vdots                     \\
\idea{(}\tau_{i1}\idea{,} & \dots & \tau_{ij}\idea{,} & \dots & \tau_{ik}\idea{),} \\
\vdots      & &      \vdots                   & &       \vdots                  \\
\idea{(}\tau_{n1}\idea{,} & \dots & \tau_{nj}\idea{,} & \dots & \tau_{nk}\idea{)}
\end{array} \right] 
\idea{ \in \mathcal{S}^k } \]
\column{0.3\textwidth}
\end{columns}
\end{block}

\pause
\begin{alertblock}{Goal}
Merge components (sequentially) to obtain a hierarchy over the set of components % $\{C_1, \dots, C_k\}$. %In other words, obtain a binary tree with a set of leafs $\{C_1, \dots, C_k\}$
\end{alertblock}

\end{frame}


\end{document}